name: "Delete Untagged Images"

# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#push
on:
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
  schedule:
    # Every Sunday at 00:00
    - cron: "0 0 * * 0"
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch
  workflow_dispatch: {}

jobs:
  delete-untagged-images:
    runs-on: "ubuntu-latest"
    steps:
      - name: "Delete untagged images from GitHub Container Registry"
        env:
          GHCR_OWNER: "mklbravo"
          GHCR_REPO: "devimage"
          GHCR_TOKEN: "${{ secrets.PACKAGE_DELETE_TOKEN }}"
        run: |
          # Get all image versions in the repository
          # See: https://docs.github.com/en/rest/packages/packages?apiVersion=2022-11-28#list-package-versions-for-a-package-owned-by-a-user
          IMAGE_VERSIONS=$(curl -s -H "Authorization: Bearer $GHCR_TOKEN" \
            "https://api.github.com/users/$GHCR_OWNER/packages/container/$GHCR_REPO/versions")

          # Loop through each version to check if it has any tags
          echo "$IMAGE_VERSIONS" | jq -c '.[]' | while read version; do
            IMAGE_NAME=$(echo "$version" | jq -r '.name')
            TAG_COUNT=$(echo "$version" | jq '.metadata.container.tags | length')
            VERSION_ID=$(echo "$version" | jq -r '.id')

            if [ "$TAG_COUNT" -eq "0" ]; then
              echo "Attempting to delete untagged image with version Name: $IMAGE_NAME"

              # See: https://docs.github.com/en/rest/packages/packages?apiVersion=2022-11-28#delete-package-version-for-a-user
              RESPONSE_CODE=$(curl -s -o /dev/null "%{http_code}" -X DELETE -H "Authorization: Bearer $GHCR_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/users/$GHCR_OWNER/packages/container/$GHCR_REPO/versions/$VERSION_ID")

              if [ "$RESPONSE_CODE" -eq "204" ]; then
                echo "Successfully deleted untagged image with version Name: $IMAGE_NAME"
              else
                echo "Failed to delete untagged image with version Name: $IMAGE_NAME"
                exit 1
              fi
            fi
          done
